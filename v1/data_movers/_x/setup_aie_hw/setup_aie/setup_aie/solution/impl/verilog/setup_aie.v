// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="setup_aie_setup_aie,hls_ip_2022_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvc1902-vsvd1760-2MP-e-S,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433090,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1953,HLS_SYN_LUT=3392,HLS_VERSION=2022_2_2}" *)

module setup_aie (
        ap_clk,
        ap_rst_n,
        event_done,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        s_TDATA,
        s_TVALID,
        s_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt,
        event_start,
        stall_start_ext,
        stall_done_ext,
        stall_start_str,
        stall_done_str,
        stall_start_int,
        stall_done_int
);

parameter    ap_ST_fsm_state1 = 76'd1;
parameter    ap_ST_fsm_state2 = 76'd2;
parameter    ap_ST_fsm_state3 = 76'd4;
parameter    ap_ST_fsm_state4 = 76'd8;
parameter    ap_ST_fsm_state5 = 76'd16;
parameter    ap_ST_fsm_state6 = 76'd32;
parameter    ap_ST_fsm_state7 = 76'd64;
parameter    ap_ST_fsm_state8 = 76'd128;
parameter    ap_ST_fsm_state9 = 76'd256;
parameter    ap_ST_fsm_state10 = 76'd512;
parameter    ap_ST_fsm_state11 = 76'd1024;
parameter    ap_ST_fsm_state12 = 76'd2048;
parameter    ap_ST_fsm_state13 = 76'd4096;
parameter    ap_ST_fsm_state14 = 76'd8192;
parameter    ap_ST_fsm_state15 = 76'd16384;
parameter    ap_ST_fsm_state16 = 76'd32768;
parameter    ap_ST_fsm_state17 = 76'd65536;
parameter    ap_ST_fsm_state18 = 76'd131072;
parameter    ap_ST_fsm_state19 = 76'd262144;
parameter    ap_ST_fsm_state20 = 76'd524288;
parameter    ap_ST_fsm_state21 = 76'd1048576;
parameter    ap_ST_fsm_state22 = 76'd2097152;
parameter    ap_ST_fsm_state23 = 76'd4194304;
parameter    ap_ST_fsm_state24 = 76'd8388608;
parameter    ap_ST_fsm_state25 = 76'd16777216;
parameter    ap_ST_fsm_state26 = 76'd33554432;
parameter    ap_ST_fsm_state27 = 76'd67108864;
parameter    ap_ST_fsm_state28 = 76'd134217728;
parameter    ap_ST_fsm_state29 = 76'd268435456;
parameter    ap_ST_fsm_state30 = 76'd536870912;
parameter    ap_ST_fsm_state31 = 76'd1073741824;
parameter    ap_ST_fsm_state32 = 76'd2147483648;
parameter    ap_ST_fsm_state33 = 76'd4294967296;
parameter    ap_ST_fsm_state34 = 76'd8589934592;
parameter    ap_ST_fsm_state35 = 76'd17179869184;
parameter    ap_ST_fsm_state36 = 76'd34359738368;
parameter    ap_ST_fsm_state37 = 76'd68719476736;
parameter    ap_ST_fsm_state38 = 76'd137438953472;
parameter    ap_ST_fsm_state39 = 76'd274877906944;
parameter    ap_ST_fsm_state40 = 76'd549755813888;
parameter    ap_ST_fsm_state41 = 76'd1099511627776;
parameter    ap_ST_fsm_state42 = 76'd2199023255552;
parameter    ap_ST_fsm_state43 = 76'd4398046511104;
parameter    ap_ST_fsm_state44 = 76'd8796093022208;
parameter    ap_ST_fsm_state45 = 76'd17592186044416;
parameter    ap_ST_fsm_state46 = 76'd35184372088832;
parameter    ap_ST_fsm_state47 = 76'd70368744177664;
parameter    ap_ST_fsm_state48 = 76'd140737488355328;
parameter    ap_ST_fsm_state49 = 76'd281474976710656;
parameter    ap_ST_fsm_state50 = 76'd562949953421312;
parameter    ap_ST_fsm_state51 = 76'd1125899906842624;
parameter    ap_ST_fsm_state52 = 76'd2251799813685248;
parameter    ap_ST_fsm_state53 = 76'd4503599627370496;
parameter    ap_ST_fsm_state54 = 76'd9007199254740992;
parameter    ap_ST_fsm_state55 = 76'd18014398509481984;
parameter    ap_ST_fsm_state56 = 76'd36028797018963968;
parameter    ap_ST_fsm_state57 = 76'd72057594037927936;
parameter    ap_ST_fsm_state58 = 76'd144115188075855872;
parameter    ap_ST_fsm_state59 = 76'd288230376151711744;
parameter    ap_ST_fsm_state60 = 76'd576460752303423488;
parameter    ap_ST_fsm_state61 = 76'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 76'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 76'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 76'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 76'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 76'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 76'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 76'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 76'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 76'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 76'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 76'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 76'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 76'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 76'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 76'd37778931862957161709568;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM0_DATA_WIDTH = 128;
parameter    C_M_AXI_GMEM0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_USER_VALUE = 0;
parameter    C_M_AXI_GMEM0_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM0_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   event_done;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_AWADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_AWID;
output  [7:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [C_M_AXI_GMEM0_AWUSER_WIDTH - 1:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_WDATA;
output  [C_M_AXI_GMEM0_WSTRB_WIDTH - 1:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_WID;
output  [C_M_AXI_GMEM0_WUSER_WIDTH - 1:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_ARADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_ARID;
output  [7:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [C_M_AXI_GMEM0_ARUSER_WIDTH - 1:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_RID;
input  [C_M_AXI_GMEM0_RUSER_WIDTH - 1:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_BID;
input  [C_M_AXI_GMEM0_BUSER_WIDTH - 1:0] m_axi_gmem0_BUSER;
output  [127:0] s_TDATA;
output   s_TVALID;
input   s_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;
output   event_start;
output   stall_start_ext;
output   stall_done_ext;
output   stall_start_str;
output   stall_done_str;
output   stall_start_int;
output   stall_done_int;

reg stall_start_ext;
reg stall_done_ext;
reg stall_start_str;
reg stall_done_str;
reg stall_start_int;
reg stall_done_int;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [75:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] num_clusters;
wire   [31:0] num_points;
wire   [63:0] input_r;
reg    gmem0_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    s_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [31:0] size_fu_147_p2;
reg   [31:0] size_reg_280;
reg   [0:0] tmp_reg_285;
reg   [29:0] trunc_ln28_2_reg_290;
reg   [29:0] tmp_1_reg_295;
wire  signed [30:0] size_loop_fu_209_p3;
reg   [30:0] size_loop_reg_300;
wire   [127:0] zext_ln345_fu_230_p1;
wire   [0:0] icmp_ln37_fu_235_p2;
reg   [0:0] icmp_ln37_reg_311;
reg   [59:0] trunc_ln1_reg_316;
wire   [30:0] empty_fu_250_p3;
reg   [30:0] empty_reg_322;
wire  signed [31:0] sext_ln37_1_fu_266_p1;
wire    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_start;
wire    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_done;
wire    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_idle;
wire    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_ready;
wire    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWVALID;
wire   [63:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWADDR;
wire   [0:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWID;
wire   [31:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWLEN;
wire   [2:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWSIZE;
wire   [1:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWBURST;
wire   [1:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWLOCK;
wire   [3:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWCACHE;
wire   [2:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWPROT;
wire   [3:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWQOS;
wire   [3:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWREGION;
wire   [0:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWUSER;
wire    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_WVALID;
wire   [127:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_WDATA;
wire   [15:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_WSTRB;
wire    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_WLAST;
wire   [0:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_WID;
wire   [0:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_WUSER;
wire    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARVALID;
wire   [63:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARADDR;
wire   [0:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARID;
wire   [31:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARLEN;
wire   [2:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARSIZE;
wire   [1:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARBURST;
wire   [1:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARLOCK;
wire   [3:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARCACHE;
wire   [2:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARPROT;
wire   [3:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARQOS;
wire   [3:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARREGION;
wire   [0:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARUSER;
wire    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_RREADY;
wire    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_BREADY;
wire    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_s_TREADY;
wire   [127:0] grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_s_TDATA;
wire    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_s_TVALID;
wire    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_ext_blocking_n;
wire    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_str_blocking_n;
wire    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_int_blocking_n;
wire    gmem0_AWREADY;
wire    gmem0_WREADY;
reg    gmem0_ARVALID;
wire    gmem0_ARREADY;
reg   [63:0] gmem0_ARADDR;
reg   [31:0] gmem0_ARLEN;
wire    gmem0_RVALID;
reg    gmem0_RREADY;
wire   [127:0] gmem0_RDATA;
wire   [8:0] gmem0_RFIFONUM;
wire    gmem0_BVALID;
reg    grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_start_reg;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
wire  signed [63:0] sext_ln37_fu_256_p1;
reg    ap_block_state1;
wire   [31:0] shl_ln27_1_fu_141_p2;
wire   [31:0] shl_ln27_fu_135_p2;
wire   [31:0] sub_ln28_fu_181_p2;
wire   [29:0] trunc_ln28_1_fu_186_p4;
wire   [30:0] zext_ln28_fu_196_p1;
wire   [30:0] sub_ln28_1_fu_200_p2;
wire   [30:0] zext_ln28_1_fu_206_p1;
wire  signed [31:0] sext_ln28_fu_216_p1;
wire   [96:0] p_Result_s_fu_220_p5;
wire    ap_CS_fsm_state76;
wire    regslice_both_s_U_apdone_blk;
reg   [75:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
reg    ap_ST_fsm_state75_blk;
reg    ap_ST_fsm_state76_blk;
wire    ap_ext_blocking_cur_n;
wire    ap_str_blocking_cur_n;
reg    ap_ext_blocking_sub_n;
reg    ap_wait_0;
reg    ap_sub_ext_blocking_0;
reg    ap_str_blocking_sub_n;
reg    ap_sub_str_blocking_0;
reg    ap_int_blocking_sub_n;
reg    ap_sub_int_blocking_0;
wire    ap_ext_blocking_n;
wire    ap_str_blocking_n;
wire    ap_int_blocking_n;
reg    ap_ext_blocking_n_reg;
reg    ap_str_blocking_n_reg;
reg    ap_int_blocking_n_reg;
reg   [127:0] s_TDATA_int_regslice;
reg    s_TVALID_int_regslice;
wire    s_TREADY_int_regslice;
wire    regslice_both_s_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 76'd1;
#0 grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_start_reg = 1'b0;
end

setup_aie_setup_aie_Pipeline_VITIS_LOOP_37_1 grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_start),
    .ap_done(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_done),
    .ap_idle(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_idle),
    .ap_ready(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_ready),
    .m_axi_gmem0_AWVALID(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWVALID),
    .m_axi_gmem0_AWREADY(1'b0),
    .m_axi_gmem0_AWADDR(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWADDR),
    .m_axi_gmem0_AWID(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWID),
    .m_axi_gmem0_AWLEN(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWLEN),
    .m_axi_gmem0_AWSIZE(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWSIZE),
    .m_axi_gmem0_AWBURST(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWBURST),
    .m_axi_gmem0_AWLOCK(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWLOCK),
    .m_axi_gmem0_AWCACHE(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWCACHE),
    .m_axi_gmem0_AWPROT(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWPROT),
    .m_axi_gmem0_AWQOS(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWQOS),
    .m_axi_gmem0_AWREGION(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWREGION),
    .m_axi_gmem0_AWUSER(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_AWUSER),
    .m_axi_gmem0_WVALID(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_WVALID),
    .m_axi_gmem0_WREADY(1'b0),
    .m_axi_gmem0_WDATA(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_WDATA),
    .m_axi_gmem0_WSTRB(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_WSTRB),
    .m_axi_gmem0_WLAST(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_WLAST),
    .m_axi_gmem0_WID(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_WID),
    .m_axi_gmem0_WUSER(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_WUSER),
    .m_axi_gmem0_ARVALID(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARVALID),
    .m_axi_gmem0_ARREADY(gmem0_ARREADY),
    .m_axi_gmem0_ARADDR(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARADDR),
    .m_axi_gmem0_ARID(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARID),
    .m_axi_gmem0_ARLEN(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARLEN),
    .m_axi_gmem0_ARSIZE(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARSIZE),
    .m_axi_gmem0_ARBURST(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARBURST),
    .m_axi_gmem0_ARLOCK(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARLOCK),
    .m_axi_gmem0_ARCACHE(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARCACHE),
    .m_axi_gmem0_ARPROT(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARPROT),
    .m_axi_gmem0_ARQOS(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARQOS),
    .m_axi_gmem0_ARREGION(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARREGION),
    .m_axi_gmem0_ARUSER(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARUSER),
    .m_axi_gmem0_RVALID(gmem0_RVALID),
    .m_axi_gmem0_RREADY(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_RREADY),
    .m_axi_gmem0_RDATA(gmem0_RDATA),
    .m_axi_gmem0_RLAST(1'b0),
    .m_axi_gmem0_RID(1'd0),
    .m_axi_gmem0_RFIFONUM(gmem0_RFIFONUM),
    .m_axi_gmem0_RUSER(1'd0),
    .m_axi_gmem0_RRESP(2'd0),
    .m_axi_gmem0_BVALID(1'b0),
    .m_axi_gmem0_BREADY(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_BREADY),
    .m_axi_gmem0_BRESP(2'd0),
    .m_axi_gmem0_BID(1'd0),
    .m_axi_gmem0_BUSER(1'd0),
    .s_TREADY(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_s_TREADY),
    .sext_ln37(trunc_ln1_reg_316),
    .size_loop(size_loop_reg_300),
    .s_TDATA(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_s_TDATA),
    .s_TVALID(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_s_TVALID),
    .ap_ext_blocking_n(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_str_blocking_n),
    .ap_int_blocking_n(grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_int_blocking_n)
);

setup_aie_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .num_clusters(num_clusters),
    .num_points(num_points),
    .input_r(input_r),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .event_start(event_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

setup_aie_gmem0_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 69 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM0_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 128 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem0_m_axi_U(
    .AWVALID(m_axi_gmem0_AWVALID),
    .AWREADY(m_axi_gmem0_AWREADY),
    .AWADDR(m_axi_gmem0_AWADDR),
    .AWID(m_axi_gmem0_AWID),
    .AWLEN(m_axi_gmem0_AWLEN),
    .AWSIZE(m_axi_gmem0_AWSIZE),
    .AWBURST(m_axi_gmem0_AWBURST),
    .AWLOCK(m_axi_gmem0_AWLOCK),
    .AWCACHE(m_axi_gmem0_AWCACHE),
    .AWPROT(m_axi_gmem0_AWPROT),
    .AWQOS(m_axi_gmem0_AWQOS),
    .AWREGION(m_axi_gmem0_AWREGION),
    .AWUSER(m_axi_gmem0_AWUSER),
    .WVALID(m_axi_gmem0_WVALID),
    .WREADY(m_axi_gmem0_WREADY),
    .WDATA(m_axi_gmem0_WDATA),
    .WSTRB(m_axi_gmem0_WSTRB),
    .WLAST(m_axi_gmem0_WLAST),
    .WID(m_axi_gmem0_WID),
    .WUSER(m_axi_gmem0_WUSER),
    .ARVALID(m_axi_gmem0_ARVALID),
    .ARREADY(m_axi_gmem0_ARREADY),
    .ARADDR(m_axi_gmem0_ARADDR),
    .ARID(m_axi_gmem0_ARID),
    .ARLEN(m_axi_gmem0_ARLEN),
    .ARSIZE(m_axi_gmem0_ARSIZE),
    .ARBURST(m_axi_gmem0_ARBURST),
    .ARLOCK(m_axi_gmem0_ARLOCK),
    .ARCACHE(m_axi_gmem0_ARCACHE),
    .ARPROT(m_axi_gmem0_ARPROT),
    .ARQOS(m_axi_gmem0_ARQOS),
    .ARREGION(m_axi_gmem0_ARREGION),
    .ARUSER(m_axi_gmem0_ARUSER),
    .RVALID(m_axi_gmem0_RVALID),
    .RREADY(m_axi_gmem0_RREADY),
    .RDATA(m_axi_gmem0_RDATA),
    .RLAST(m_axi_gmem0_RLAST),
    .RID(m_axi_gmem0_RID),
    .RUSER(m_axi_gmem0_RUSER),
    .RRESP(m_axi_gmem0_RRESP),
    .BVALID(m_axi_gmem0_BVALID),
    .BREADY(m_axi_gmem0_BREADY),
    .BRESP(m_axi_gmem0_BRESP),
    .BID(m_axi_gmem0_BID),
    .BUSER(m_axi_gmem0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem0_ARVALID),
    .I_ARREADY(gmem0_ARREADY),
    .I_ARADDR(gmem0_ARADDR),
    .I_ARLEN(gmem0_ARLEN),
    .I_RVALID(gmem0_RVALID),
    .I_RREADY(gmem0_RREADY),
    .I_RDATA(gmem0_RDATA),
    .I_RFIFONUM(gmem0_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem0_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem0_WREADY),
    .I_WDATA(128'd0),
    .I_WSTRB(16'd0),
    .I_BVALID(gmem0_BVALID),
    .I_BREADY(1'b0)
);

setup_aie_regslice_both #(
    .DataWidth( 128 ))
regslice_both_s_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_TDATA_int_regslice),
    .vld_in(s_TVALID_int_regslice),
    .ack_in(s_TREADY_int_regslice),
    .data_out(s_TDATA),
    .vld_out(regslice_both_s_U_vld_out),
    .ack_out(s_TREADY),
    .apdone_blk(regslice_both_s_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_both_s_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state76))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state74)) begin
            grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_start_reg <= 1'b1;
        end else if ((grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_ready == 1'b1)) begin
            grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_ext_blocking_n_reg <= ap_ext_blocking_n;
end

always @ (posedge ap_clk) begin
    ap_int_blocking_n_reg <= ap_int_blocking_n;
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    ap_str_blocking_n_reg <= ap_str_blocking_n;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_reg_322 <= empty_fu_250_p3;
        trunc_ln1_reg_316 <= {{input_r[63:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln37_reg_311 <= icmp_ln37_fu_235_p2;
        size_loop_reg_300 <= size_loop_fu_209_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        size_reg_280[31 : 1] <= size_fu_147_p2[31 : 1];
        tmp_1_reg_295 <= {{size_fu_147_p2[31:2]}};
        tmp_reg_285 <= size_fu_147_p2[32'd31];
        trunc_ln28_2_reg_290 <= {{size_fu_147_p2[31:2]}};
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((s_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

always @ (*) begin
    if ((s_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

always @ (*) begin
    if ((gmem0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

always @ (*) begin
    if ((grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_done == 1'b0)) begin
        ap_ST_fsm_state75_blk = 1'b1;
    end else begin
        ap_ST_fsm_state75_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_s_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state76_blk = 1'b1;
    end else begin
        ap_ST_fsm_state76_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((regslice_both_s_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state76))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_ext_blocking_0) == 1'b1)) begin
        ap_ext_blocking_sub_n = 1'b0;
    end else begin
        ap_ext_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_int_blocking_0) == 1'b1)) begin
        ap_int_blocking_sub_n = 1'b0;
    end else begin
        ap_int_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_s_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state76))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_str_blocking_0) == 1'b1)) begin
        ap_str_blocking_sub_n = 1'b0;
    end else begin
        ap_str_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if ((grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_0 = 1'b1;
    end else begin
        ap_sub_ext_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_0 = 1'b1;
    end else begin
        ap_sub_int_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_0 = 1'b1;
    end else begin
        ap_sub_str_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state75 == ap_CS_fsm)) begin
        ap_wait_0 = 1'b1;
    end else begin
        ap_wait_0 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem0_ARADDR = sext_ln37_fu_256_p1;
    end else if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74))) begin
        gmem0_ARADDR = grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARADDR;
    end else begin
        gmem0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem0_ARLEN = sext_ln37_1_fu_266_p1;
    end else if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74))) begin
        gmem0_ARLEN = grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARLEN;
    end else begin
        gmem0_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem0_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74))) begin
        gmem0_ARVALID = grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_ARVALID;
    end else begin
        gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74))) begin
        gmem0_RREADY = grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_m_axi_gmem0_RREADY;
    end else begin
        gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        s_TDATA_blk_n = s_TREADY_int_regslice;
    end else begin
        s_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (s_TREADY_int_regslice == 1'b1))) begin
        s_TDATA_int_regslice = zext_ln345_fu_230_p1;
    end else if (((grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_s_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
        s_TDATA_int_regslice = grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_s_TDATA;
    end else begin
        s_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (s_TREADY_int_regslice == 1'b1))) begin
        s_TVALID_int_regslice = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        s_TVALID_int_regslice = grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_s_TVALID;
    end else begin
        s_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ext_blocking_n_reg == 1'b0) & (ap_ext_blocking_n == 1'b1))) begin
        stall_done_ext = 1'b1;
    end else begin
        stall_done_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n_reg == 1'b0) & (ap_int_blocking_n == 1'b1))) begin
        stall_done_int = 1'b1;
    end else begin
        stall_done_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n_reg == 1'b0) & (ap_str_blocking_n == 1'b1))) begin
        stall_done_str = 1'b1;
    end else begin
        stall_done_str = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ext_blocking_n_reg == 1'b1) & (ap_ext_blocking_n == 1'b0))) begin
        stall_start_ext = 1'b1;
    end else begin
        stall_start_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n_reg == 1'b1) & (ap_int_blocking_n == 1'b0))) begin
        stall_start_int = 1'b1;
    end else begin
        stall_start_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n_reg == 1'b1) & (ap_str_blocking_n == 1'b0))) begin
        stall_start_str = 1'b1;
    end else begin
        stall_start_str = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (s_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (s_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((gmem0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (((grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((regslice_both_s_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_ext_blocking_cur_n = gmem0_blk_n_AR;

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & ap_ext_blocking_cur_n);

assign ap_int_blocking_n = (ap_int_blocking_sub_n & 1'b1);

assign ap_str_blocking_cur_n = s_TDATA_blk_n;

assign ap_str_blocking_n = (ap_str_blocking_sub_n & ap_str_blocking_cur_n);

assign empty_fu_250_p3 = ((icmp_ln37_reg_311[0:0] == 1'b1) ? size_loop_reg_300 : 31'd0);

assign event_done = ap_done;

assign grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_start = grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_ap_start_reg;

assign grp_setup_aie_Pipeline_VITIS_LOOP_37_1_fu_125_s_TREADY = (s_TREADY_int_regslice & ap_CS_fsm_state75);

assign icmp_ln37_fu_235_p2 = (($signed(tmp_1_reg_295) > $signed(30'd0)) ? 1'b1 : 1'b0);

assign p_Result_s_fu_220_p5 = {{{{{{1'd0}, {num_points}}}, {num_clusters}}}, {sext_ln28_fu_216_p1}};

assign s_TVALID = regslice_both_s_U_vld_out;

assign sext_ln28_fu_216_p1 = size_loop_fu_209_p3;

assign sext_ln37_1_fu_266_p1 = $signed(empty_reg_322);

assign sext_ln37_fu_256_p1 = $signed(trunc_ln1_reg_316);

assign shl_ln27_1_fu_141_p2 = num_points << 32'd1;

assign shl_ln27_fu_135_p2 = num_clusters << 32'd1;

assign size_fu_147_p2 = (shl_ln27_1_fu_141_p2 + shl_ln27_fu_135_p2);

assign size_loop_fu_209_p3 = ((tmp_reg_285[0:0] == 1'b1) ? sub_ln28_1_fu_200_p2 : zext_ln28_1_fu_206_p1);

assign sub_ln28_1_fu_200_p2 = (31'd0 - zext_ln28_fu_196_p1);

assign sub_ln28_fu_181_p2 = (32'd0 - size_reg_280);

assign trunc_ln28_1_fu_186_p4 = {{sub_ln28_fu_181_p2[31:2]}};

assign zext_ln28_1_fu_206_p1 = trunc_ln28_2_reg_290;

assign zext_ln28_fu_196_p1 = trunc_ln28_1_fu_186_p4;

assign zext_ln345_fu_230_p1 = p_Result_s_fu_220_p5;

always @ (posedge ap_clk) begin
    size_reg_280[0] <= 1'b0;
end


reg find_kernel_block = 0;
// synthesis translate_off
`include "setup_aie_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //setup_aie

